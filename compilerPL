# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
import re

# Token types
INTEGER = 'INTEGER'
PLUS = 'PLUS'
MINUS = 'MINUS'
MULTIPLY = 'MULTIPLY'
DIVIDE = 'DIVIDE'
LPAREN = '('
RPAREN = ')'
GT = 'GT'
LT = 'LT'
GTE = 'GTE'
LTE = 'LTE'
EQ = 'EQ'
NEQ = 'NEQ'
NOT = 'NOT'
AND = 'AND'
OR = 'OR'
EOF = 'EOF'

# Token class
class Token:
    def __init__(self, type, value=None):
        self.type = type
        self.value = value

    def __str__(self):
        return f'Token({self.type}, {self.value})'

    def __repr__(self):
        return self.__str__()

# Lexer class
class Lexer:
    def __init__(self, text):
        self.text = text
        self.pos = 0
        self.current_char = self.text[self.pos]

    def advance(self):
        self.pos += 1
        self.current_char = self.text[self.pos] if self.pos < len(self.text) else None

    def skip_whitespace(self):
        while self.current_char is not None and self.current_char.isspace():
            self.advance()

    def integer(self):
        result = ''
        while self.current_char is not None and self.current_char.isdigit():
            result += self.current_char
            self.advance()
        return int(result)

    def get_next_token(self):
        while self.current_char is not None:
            if self.current_char.isspace():
                self.skip_whitespace()
                continue

            if self.current_char.isdigit():
                return Token(INTEGER, self.integer())

            if self.current_char == '+':
                self.advance()
                return Token(PLUS, '+')

            if self.current_char == '-':
                self.advance()
                return Token(MINUS, '-')

            if self.current_char == '*':
                self.advance()
                return Token(MULTIPLY, '*')

            if self.current_char == '/':
                self.advance()
                return Token(DIVIDE, '/')

            if self.current_char == '(':
                self.advance()
                return Token(LPAREN, '(')

            if self.current_char == ')':
                self.advance()
                return Token(RPAREN, ')')

            if self.current_char == '>':
                self.advance()
                if self.current_char == '=':
                    self.advance()
                    return Token(GTE, '>=')
                return Token(GT, '>')

            if self.current_char == '<':
                self.advance()
                if self.current_char == '=':
                    self.advance()
                    return Token(LTE, '<=')
                return Token(LT, '<')

            if self.current_char == '=':
                self.advance()
                if self.current_char == '=':
                    self.advance()
                    return Token(EQ, '==')
                raise Exception("Invalid token")

            if self.current_char == '!':
                self.advance()
                if self.current_char == '=':
                    self.advance()
                    return Token(NEQ, '!=')
                return Token(NOT, '!')

            if self.current_char == '&':
                self.advance()
                if self.current_char == '&':
                    self.advance()
                    return Token(AND, '&&')
                raise Exception("Invalid token")

            if self.current_char == '|':
                self.advance()
                if self.current_char == '|':
                    self.advance()
                    return Token(OR, '||')
                raise Exception("Invalid token")

            raise Exception("Invalid token")

        return Token(EOF)

# Parser class
class Parser:
    def __init__(self, lexer):
        self.lexer = lexer
        self.current_token = self.lexer.get_next_token()

    def eat(self, token_type):
        if self.current_token.type == token_type:
            self.current_token = self.lexer.get_next_token()
        else:
            raise Exception("Invalid syntax")

    def factor(self):
        token = self.current_token
        if token.type == INTEGER:
            self.eat(INTEGER)
            return token.value
        elif token.type == LPAREN:
            self.eat(LPAREN)
            result = self.expr()
            self.eat(RPAREN)
            return result
        elif token.type == NOT:
            self.eat(NOT)
            return not self.factor()  # Negate the result of the next factor

    def term(self):
        result = self.factor()
        while self.current_token.type in (MULTIPLY, DIVIDE):
            token = self.current_token
            if token.type == MULTIPLY:
                self.eat(MULTIPLY)
                result *= self.factor()
            elif token.type == DIVIDE:
                self.eat(DIVIDE)
                result /= self.factor()
        return result

    def expr(self):
        result = self.term()
        while self.current_token.type in (PLUS, MINUS, GT, LT, GTE, LTE, EQ, NEQ, AND, OR):
            token = self.current_token
            if token.type == PLUS:
                self.eat(PLUS)
                result += self.term()
            elif token.type == MINUS:
                self.eat(MINUS)
                result -= self.term()
            elif token.type == GT:
                self.eat(GT)
                result = result > self.term()
            elif token.type == LT:
                self.eat(LT)
                result = result < self.term()
            elif token.type == GTE:
                self.eat(GTE)
                result = result >= self.term()
            elif token.type == LTE:
                self.eat(LTE)
                result = result <= self.term()
            elif token.type == EQ:
                self.eat(EQ)
                result = result == self.term()
            elif token.type == NEQ:
                self.eat(NEQ)
                result = result != self.term()
            elif token.type == AND:
                self.eat(AND)
                result = result and self.term()
            elif token.type == OR:
                self.eat(OR)
                result = result or self.term()
        return result

# Evaluator
def evaluate(expression):
    lexer = Lexer(expression)
    parser = Parser(lexer)
    return parser.expr()

# Test the compiler
if __name__ == '__main__':
    while True:
        try:
            text = input("Expression: ")
        except EOFError:
            break
        if not text:
            continue
        result = evaluate(text)
        print(result)
